import { create_slot, element, space, claim_element, children, detach, claim_space, attr, insert_hydration, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, SvelteComponent, init, safe_not_equal } from './liquivelte-svelte-hs6e88e89c.liquivelte.js';
import { cachedLiquid } from './liquivelte-liquid-hs6dbc6cca.liquivelte.js';

/* Usersmalipetek/Documents/Documents/Projects/LIQUVELTE/LIQUIVELTE TEST/src/snippets/badge.liquivelte generated by Svelte v3.50.0 */
const get_asd_slot_changes = dirty => ({});
const get_asd_slot_context = ctx => ({});

function create_fragment(ctx) {
	let div;
	let t;
	let h1;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	const asd_slot_template = /*#slots*/ ctx[4].asd;
	const asd_slot = create_slot(asd_slot_template, ctx, /*$$scope*/ ctx[3], get_asd_slot_context);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			h1 = element("h1");
			if (asd_slot) asd_slot.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, "data-asd": true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach);
			t = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			if (asd_slot) asd_slot.l(h1_nodes);
			h1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "badge svelte-k2ms7k");
			attr(div, "data-asd", "asdas");
		},
		m(target, anchor) {
			insert_hydration(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			insert_hydration(target, t, anchor);
			insert_hydration(target, h1, anchor);

			if (asd_slot) {
				asd_slot.m(h1, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (asd_slot) {
				if (asd_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						asd_slot,
						asd_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(asd_slot_template, /*$$scope*/ ctx[3], dirty, get_asd_slot_changes),
						get_asd_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(asd_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(asd_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(h1);
			if (asd_slot) asd_slot.d(detaching);
		}
	};
}

let index = 0;
const b = 2;
const a = 7;

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { lec } = $$props;
	const liquid = cachedLiquid(lec);
	const shop = {};
	let { shop$name } = $$props;
	shop.name = shop$name;
	const product = {};
	let { product$id } = $$props;
	product.id = product$id;

	$$self.$$set = $$props => {
		if ('lec' in $$props) $$invalidate(0, lec = $$props.lec);
		if ('shop$name' in $$props) $$invalidate(1, shop$name = $$props.shop$name);
		if ('product$id' in $$props) $$invalidate(2, product$id = $$props.product$id);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [lec, shop$name, product$id, $$scope, slots];
}

class Badge extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { lec: 0, shop$name: 1, product$id: 2 });
	}
}

export { Badge as default };
