import { Shopify } from "@shopify/shopify-api";
import { GoogleSpreadsheet } from 'google-spreadsheet';
import "dotenv/config";

const doc = new GoogleSpreadsheet(process.env.SHEET_ID);

await doc.useServiceAccountAuth({
  // env var values are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  private_key: process.env.GOOGLE_PRIVATE_KEY,
});
await doc.loadInfo();

const onlineSessionsSheet = doc.sheetsByTitle.ONLINE_SESSIONS;
const offlineSessionsSheet = doc.sheetsByTitle.INSTALLATIONS;

export const createStoreForShopifyContext = async (sheet) => {
  await sheet.setHeaderRow(['id', 'shop', 'state', 'isOnline', 'accessToken', 'expires'], 0);
  
  const sheetWrapper = {
    storeCallback: async (session) => {
      try{
        let row = (await sheet.getRows()).find(r => r.id == session.id);
        if(!row) {
          row = await sheet.addRow({shop: session.shop});
        }
        row.id = session.id;
        row.shop = session.shop;
        row.state = session.state;
        row.isOnline = session.isOnline;
        row.accessToken = session.accessToken;
        if (session.expires) {
          row.expires = new Date(session.expires).getTime();
        }
        row.offlineToken = row.offlineToken;
        await row.save();
        return true;
      } catch(err) {
        console.error('Error storing session', err);
        return false;
      }
    },
    loadCallback: async (id) => {
      const sessionPayload = (await sheet.getRows()).find(r => r.id == id);
      if (!sessionPayload) return false;
      if(sessionPayload.expires) {
        sessionPayload.expires = new Date(+sessionPayload.expires);
      }
      sessionPayload.scope = process.env.SCOPES.split(',');
      return Shopify.Session.Session.cloneSession(sessionPayload, id);
    },
    deleteCallback: async (id) => {
      try {
        const row = (await sheet.getRows()).find(r => r.id == id);
        await row.delete();
        return true;
      } catch(err) {
        console.log('Error deleting session');
        return false;
      }
    }
  };
  return sheetWrapper;
};

export const onlineSessionStore = await createStoreForShopifyContext(onlineSessionsSheet);
